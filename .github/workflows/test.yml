---
name: Test trx-to-vsplaylist Action

on:
  push:
    branches:
      - main
      - 'v*'
  pull_request:
    branches:
      - main
      - 'v*'
  workflow_dispatch:

jobs:
  test-action:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create sample TRX files
        run: |
          mkdir -p TestResults
          
          # Create comprehensive TRX file with all test outcomes
          cat > TestResults/comprehensive.trx << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <TestRun id="12345678-1234-1234-1234-123456789012" name="Comprehensive Test Run" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
            <Results>
              <UnitTestResult executionId="execution-1" testId="test-1" testName="FailedTest" computerName="TestComputer" duration="00:00:00.0010000" startTime="2023-01-01T12:00:00.000Z" endTime="2023-01-01T12:00:00.001Z" outcome="Failed" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d">
                <Output>
                  <ErrorInfo>
                    <Message>Assert.AreEqual failed. Expected:&lt;2&gt;. Actual:&lt;1&gt;.</Message>
                  </ErrorInfo>
                </Output>
              </UnitTestResult>
              <UnitTestResult executionId="execution-2" testId="test-2" testName="PassedTest" computerName="TestComputer" duration="00:00:00.0010000" startTime="2023-01-01T12:00:01.000Z" endTime="2023-01-01T12:00:01.001Z" outcome="Passed" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
              <UnitTestResult executionId="execution-3" testId="test-3" testName="NotExecutedTest" computerName="TestComputer" duration="00:00:00.0000000" startTime="2023-01-01T12:00:02.000Z" endTime="2023-01-01T12:00:02.000Z" outcome="NotExecuted" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
              <UnitTestResult executionId="execution-4" testId="test-4" testName="InconclusiveTest" computerName="TestComputer" duration="00:00:00.0010000" startTime="2023-01-01T12:00:03.000Z" endTime="2023-01-01T12:00:03.001Z" outcome="Inconclusive" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
              <UnitTestResult executionId="execution-5" testId="test-5" testName="TimeoutTest" computerName="TestComputer" duration="00:00:30.0000000" startTime="2023-01-01T12:00:04.000Z" endTime="2023-01-01T12:00:34.000Z" outcome="Timeout" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
            </Results>
            <TestDefinitions>
              <UnitTest name="FailedTest" id="test-1">
                <TestMethod codeBase="TestAssembly.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="TestClass" name="FailedTest" />
              </UnitTest>
              <UnitTest name="PassedTest" id="test-2">
                <TestMethod codeBase="TestAssembly.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="TestClass" name="PassedTest" />
              </UnitTest>
              <UnitTest name="NotExecutedTest" id="test-3">
                <TestMethod codeBase="TestAssembly.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="TestClass" name="NotExecutedTest" />
              </UnitTest>
              <UnitTest name="InconclusiveTest" id="test-4">
                <TestMethod codeBase="TestAssembly.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="TestClass" name="InconclusiveTest" />
              </UnitTest>
              <UnitTest name="TimeoutTest" id="test-5">
                <TestMethod codeBase="TestAssembly.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="TestClass" name="TimeoutTest" />
              </UnitTest>
            </TestDefinitions>
          </TestRun>
          EOF
          
          # Create simple TRX file for basic tests (keeping backward compatibility)
          cat > TestResults/sample.trx << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <TestRun id="12345678-1234-1234-1234-123456789012" name="Test Run" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
            <Results>
              <UnitTestResult executionId="execution-1" testId="test-1" testName="TestMethod1" computerName="TestComputer" duration="00:00:00.0010000" startTime="2023-01-01T12:00:00.000Z" endTime="2023-01-01T12:00:00.001Z" outcome="Failed" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d">
                <Output>
                  <ErrorInfo>
                    <Message>Assert.AreEqual failed. Expected:&lt;2&gt;. Actual:&lt;1&gt;.</Message>
                  </ErrorInfo>
                </Output>
              </UnitTestResult>
              <UnitTestResult executionId="execution-2" testId="test-2" testName="TestMethod2" computerName="TestComputer" duration="00:00:00.0010000" startTime="2023-01-01T12:00:01.000Z" endTime="2023-01-01T12:00:01.001Z" outcome="Passed" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
            </Results>
            <TestDefinitions>
              <UnitTest name="TestMethod1" id="test-1">
                <TestMethod codeBase="TestAssembly.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="TestClass" name="TestMethod1" />
              </UnitTest>
              <UnitTest name="TestMethod2" id="test-2">
                <TestMethod codeBase="TestAssembly.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="TestClass" name="TestMethod2" />
              </UnitTest>
            </TestDefinitions>
          </TestRun>
          EOF
          
          # Create additional TRX file for glob pattern testing
          cat > TestResults/additional.trx << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <TestRun id="87654321-4321-4321-4321-210987654321" name="Additional Test Run" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
            <Results>
              <UnitTestResult executionId="execution-1" testId="test-1" testName="AdditionalTest" computerName="TestComputer" duration="00:00:00.0010000" startTime="2023-01-01T12:00:00.000Z" endTime="2023-01-01T12:00:00.001Z" outcome="Failed" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
            </Results>
            <TestDefinitions>
              <UnitTest name="AdditionalTest" id="test-1">
                <TestMethod codeBase="TestAssembly.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="TestClass" name="AdditionalTest" />
              </UnitTest>
            </TestDefinitions>
          </TestRun>
          EOF

      - name: Test Action - Basic Usage
        uses: ./
        with:
          trx-file-path: './TestResults/sample.trx'
          artifact-name: 'test-playlist-basic'

      - name: Verify playlist file was created
        run: |
          if [ -f "./TestResults/sample.playlist" ]; then
            echo "✅ Playlist file created successfully"
            echo "Content:"
            cat "./TestResults/sample.playlist"
            # Ensure playlist is not empty
            if [ ! -s "./TestResults/sample.playlist" ]; then
              echo "❌ Playlist file is empty"
              exit 1
            fi
            # Ensure playlist contains at least one test name (e.g., TestMethod1 or TestMethod2)
            if grep -q "TestMethod" "./TestResults/sample.playlist"; then
              echo "✅ Playlist contains test names"
            else
              echo "❌ Playlist does not contain any test names"
              exit 1
            fi
          else
            echo "❌ Playlist file not found"
            exit 1
          fi

      - name: Test Action - Custom Output Path
        uses: ./
        with:
          trx-file-path: './TestResults/sample.trx'
          output-path: './custom-playlists'
          test-outcomes: 'Failed,Passed'
          artifact-name: 'test-playlist-custom'

      - name: Verify custom playlist file was created
        run: |
          if [ -f "./custom-playlists/sample.playlist" ]; then
            echo "✅ Custom playlist file created successfully"
            echo "Content:"
            cat "./custom-playlists/sample.playlist"
            # Ensure playlist is not empty
            if [ ! -s "./custom-playlists/sample.playlist" ]; then
              echo "❌ Custom playlist file is empty"
              exit 1
            fi
            # Ensure playlist contains at least one test name (e.g., TestMethod1 or TestMethod2)
            if grep -q "TestMethod" "./custom-playlists/sample.playlist"; then
              echo "✅ Custom playlist contains test names"
            else
              echo "❌ Custom playlist does not contain any test names"
              exit 1
            fi
          else
            echo "❌ Custom playlist file not found"
            exit 1
          fi

      # Test individual test outcomes
      - name: Test Action - Passed outcomes only
        uses: ./
        with:
          trx-file-path: './TestResults/comprehensive.trx'
          output-path: './passed-only.playlist'
          test-outcomes: 'Passed'
          artifact-name: 'test-playlist-passed'

      - name: Verify passed-only playlist
        run: |
          if [ -f "./passed-only.playlist" ]; then
            echo "✅ Passed-only playlist created successfully"
            echo "Content:"
            cat "./passed-only.playlist"
            # Should contain only PassedTest
            if grep -q "PassedTest" "./passed-only.playlist"; then
              echo "✅ Contains expected PassedTest"
            else
              echo "❌ Missing expected PassedTest"
              exit 1
            fi
          else
            echo "❌ Passed-only playlist file not found"
            exit 1
          fi

      - name: Test Action - NotExecuted outcomes only
        uses: ./
        with:
          trx-file-path: './TestResults/comprehensive.trx'
          output-path: './notexecuted-only.playlist'
          test-outcomes: 'NotExecuted'
          artifact-name: 'test-playlist-notexecuted'

      - name: Verify NotExecuted-only playlist
        run: |
          if [ -f "./notexecuted-only.playlist" ]; then
            echo "✅ NotExecuted-only playlist created successfully"
            echo "Content:"
            cat "./notexecuted-only.playlist"
            # Should contain only NotExecutedTest
            if grep -q "NotExecutedTest" "./notexecuted-only.playlist"; then
              echo "✅ Contains expected NotExecutedTest"
            else
              echo "❌ Missing expected NotExecutedTest"
              exit 1
            fi
          else
            echo "❌ NotExecuted-only playlist file not found"
            exit 1
          fi

      - name: Test Action - Inconclusive outcomes only
        uses: ./
        with:
          trx-file-path: './TestResults/comprehensive.trx'
          output-path: './inconclusive-only.playlist'
          test-outcomes: 'Inconclusive'
          artifact-name: 'test-playlist-inconclusive'

      - name: Verify Inconclusive-only playlist
        run: |
          if [ -f "./inconclusive-only.playlist" ]; then
            echo "✅ Inconclusive-only playlist created successfully"
            echo "Content:"
            cat "./inconclusive-only.playlist"
            # Should contain only InconclusiveTest
            if grep -q "InconclusiveTest" "./inconclusive-only.playlist"; then
              echo "✅ Contains expected InconclusiveTest"
            else
              echo "❌ Missing expected InconclusiveTest"
              exit 1
            fi
          else
            echo "❌ Inconclusive-only playlist file not found"
            exit 1
          fi

      - name: Test Action - Timeout outcomes only
        uses: ./
        with:
          trx-file-path: './TestResults/comprehensive.trx'
          output-path: './timeout-only.playlist'
          test-outcomes: 'Timeout'
          artifact-name: 'test-playlist-timeout'

      - name: Verify Timeout-only playlist
        run: |
          if [ -f "./timeout-only.playlist" ]; then
            echo "✅ Timeout-only playlist created successfully"
            echo "Content:"
            cat "./timeout-only.playlist"
            # Should contain only TimeoutTest
            if grep -q "TimeoutTest" "./timeout-only.playlist"; then
              echo "✅ Contains expected TimeoutTest"
            else
              echo "❌ Missing expected TimeoutTest"
              exit 1
            fi
          else
            echo "❌ Timeout-only playlist file not found"
            exit 1
          fi

      # Test all outcomes combined
      - name: Test Action - All outcomes combined
        uses: ./
        with:
          trx-file-path: './TestResults/comprehensive.trx'
          output-path: './all-outcomes.playlist'
          test-outcomes: 'Failed,Passed,NotExecuted,Inconclusive,Timeout'
          artifact-name: 'test-playlist-all'

      - name: Verify all-outcomes playlist
        run: |
          if [ -f "./all-outcomes.playlist" ]; then
            echo "✅ All-outcomes playlist created successfully"
            echo "Content:"
            cat "./all-outcomes.playlist"
            # Should contain all test types
            TESTS=("FailedTest" "PassedTest" "NotExecutedTest" "InconclusiveTest" "TimeoutTest")
            for test in "${TESTS[@]}"; do
              if grep -q "$test" "./all-outcomes.playlist"; then
                echo "✅ Contains expected $test"
              else
                echo "❌ Missing expected $test"
                exit 1
              fi
            done
          else
            echo "❌ All-outcomes playlist file not found"
            exit 1
          fi

      # Test whitespace handling in test-outcomes
      - name: Test Action - Whitespace in test-outcomes
        uses: ./
        with:
          trx-file-path: './TestResults/comprehensive.trx'
          output-path: './whitespace-test.playlist'
          test-outcomes: ' Failed , Passed , NotExecuted '
          artifact-name: 'test-playlist-whitespace'

      - name: Verify whitespace handling
        run: |
          if [ -f "./whitespace-test.playlist" ]; then
            echo "✅ Whitespace test playlist created successfully"
            echo "Content:"
            cat "./whitespace-test.playlist"
            # Should contain Failed, Passed, and NotExecuted tests
            TESTS=("FailedTest" "PassedTest" "NotExecutedTest")
            for test in "${TESTS[@]}"; do
              if grep -q "$test" "./whitespace-test.playlist"; then
                echo "✅ Contains expected $test"
              else
                echo "❌ Missing expected $test"
                exit 1
              fi
            done
          else
            echo "❌ Whitespace test playlist file not found"
            exit 1
          fi

      # Test glob pattern support
      - name: Test Action - Glob pattern support
        uses: ./
        with:
          trx-file-path: './TestResults/*.trx'
          output-path: './glob-playlists'
          test-outcomes: 'Failed'
          artifact-name: 'test-playlist-glob'

      - name: Verify glob pattern handling
        run: |
          FILES=(glob-playlists/sample.playlist glob-playlists/additional.playlist glob-playlists/comprehensive.playlist)
          for file in "${FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file created"
              cat "$file"
              if [ ! -s "$file" ]; then
                echo "❌ $file is empty"
                exit 1
              fi
            else
              echo "❌ $file not found"
              exit 1
            fi
          done

      # Test default artifact name behavior
      - name: Test Action - Default artifact name
        uses: ./
        with:
          trx-file-path: './TestResults/comprehensive.trx'
          test-outcomes: 'Failed'
        # Note: not specifying artifact-name to test default behavior

      - name: Verify default playlist file creation
        run: |
          if [ -f "./TestResults/comprehensive.playlist" ]; then
            echo "✅ Default playlist file created successfully"
            echo "Content:"
            cat "./TestResults/comprehensive.playlist"
          else
            echo "❌ Default playlist file not found"
            exit 1
          fi

  test-error-conditions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test Action - Missing TRX file (should fail)
        id: missing-trx-test
        uses: ./
        continue-on-error: true
        with:
          trx-file-path: './NonExistent/missing.trx'
          artifact-name: 'test-playlist-error'

      - name: Verify missing TRX file error handling
        run: |
          if [ "${{ steps.missing-trx-test.outcome }}" = "failure" ]; then
            echo "✅ Action correctly failed for missing TRX file"
          else
            echo "❌ Action should have failed for missing TRX file"
            exit 1
          fi

  test-multi-trx-glob:
    runs-on: ubuntu-latest
    needs: test-action
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create sample TRX files for glob test
        run: |
          mkdir -p TestResults
          cat > TestResults/first.trx << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <TestRun id="1" name="First Test Run" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
            <Results>
              <UnitTestResult executionId="execution-1" testId="test-1" testName="FirstTest" outcome="Failed" />
            </Results>
            <TestDefinitions>
              <UnitTest name="FirstTest" id="test-1">
                <TestMethod codeBase="TestAssembly.dll" className="TestClass" name="FirstTest" />
              </UnitTest>
            </TestDefinitions>
          </TestRun>
          EOF
          cat > TestResults/second.trx << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <TestRun id="2" name="Second Test Run" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
            <Results>
              <UnitTestResult executionId="execution-2" testId="test-2" testName="SecondTest" outcome="Failed" />
            </Results>
            <TestDefinitions>
              <UnitTest name="SecondTest" id="test-2">
                <TestMethod codeBase="TestAssembly.dll" className="TestClass" name="SecondTest" />
              </UnitTest>
            </TestDefinitions>
          </TestRun>
          EOF

      - name: Test Action - Multi-file glob
        uses: ./
        with:
          trx-file-path: './TestResults/*.trx'
          test-outcomes: 'Failed'
          artifact-name: 'test-playlist-multiglob'

      - name: Verify all playlists created and not empty
        run: |
          for file in ./TestResults/first.playlist ./TestResults/second.playlist; do
            if [ -f "$file" ]; then
              echo "✅ $file created"
              echo "Content:"
              cat "$file"
              if [ ! -s "$file" ]; then
                echo "❌ $file is empty"
                exit 1
              fi
            else
              echo "❌ $file not found"
              exit 1
            fi
          done
          # Check for expected test names
          if grep -q "FirstTest" ./TestResults/first.playlist && grep -q "SecondTest" ./TestResults/second.playlist; then
            echo "✅ Both playlists contain expected test names"
          else
            echo "❌ One or both playlists missing expected test names"
            exit 1
          fi
