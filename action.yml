---
name: 'TRX to VS Playlist Converter'
description: >
  Convert TRX test result files to Visual Studio Test playlist files
branding:
  icon: 'play'
  color: 'blue'

inputs:
  trx-file-path:
    description: 'Path to the TRX file to convert'
    required: true
  output-directory:
    description: >
      Directory to write the output playlist file(s) to (optional). If not specified, the
      playlist will be saved in the same directory as the TRX file with the
      same name but .playlist extension.
    required: false
  test-outcomes:
    description: >
      Test outcomes to include in the playlist (comma-separated). Accepts:
      Passed, Failed, NotExecuted, Inconclusive, Timeout, Pending. Default: Failed
    required: false
    default: 'Failed'
  artifact-name:
    description: >
      Name for the uploaded artifact. If not specified, will use the playlist
      file name (without extension).
    required: false
  skip-empty:
    description: >
      Skip writing out empty playlist files. If true, empty playlists will not be created. Default: true
    required: false
    default: 'true'

outputs:
  playlist-path:
    description: 'Path to the generated playlist file'
    value: ${{ steps.convert.outputs.playlist-path }}

runs:
  using: 'composite'
  steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.x'

    - name: Install trx-to-vsplaylist tool
      shell: bash
      run: |
        echo "Installing trx-to-vsplaylist tool..."
        dotnet tool install --global trx-to-vsplaylist
        echo "âœ… trx-to-vsplaylist tool installed successfully"

    - name: Convert TRX to Playlist
      id: convert
      shell: bash
      run: |
        # Parse inputs
        TRX_FILE="${{ inputs.trx-file-path }}"
        OUTPUT_DIRECTORY="${{ inputs.output-directory }}"
        OUTCOMES="${{ inputs.test-outcomes }}"
        SKIP_EMPTY="${{ inputs.skip-empty }}"

        # Expand glob patterns to all matching TRX files
        TRX_FILES=($(ls $TRX_FILE 2>/dev/null || echo "$TRX_FILE"))
        if [ ${#TRX_FILES[@]} -eq 0 ]; then
          echo "Error: No TRX file found matching pattern: $TRX_FILE"
          exit 1
        fi

        # Set artifact directory
        if [ -n "$OUTPUT_DIRECTORY" ]; then
          ARTIFACT_DIR="$OUTPUT_DIRECTORY"
        else
          ARTIFACT_DIR="$(dirname "${TRX_FILES[0]}")"
        fi
        mkdir -p "$ARTIFACT_DIR"

        PLAYLIST_PATHS=()
        ARTIFACT_BASENAMES=()

        for ACTUAL_TRX_FILE in "${TRX_FILES[@]}"; do
          if [ ! -f "$ACTUAL_TRX_FILE" ]; then
            echo "Warning: $ACTUAL_TRX_FILE is not a file, skipping."
            continue
          fi
          echo "Using TRX file: $ACTUAL_TRX_FILE"

          TRX_BASENAME=$(basename "$ACTUAL_TRX_FILE" .trx)
          FINAL_OUTPUT="$ARTIFACT_DIR/$TRX_BASENAME.playlist"

          # Build command arguments array
          ARGS=(convert "$ACTUAL_TRX_FILE")
          ARGS+=(--output "$FINAL_OUTPUT")

          if [ "$SKIP_EMPTY" != "false" ]; then
            ARGS+=(--skip-empty)
          fi

          if [ -n "$OUTCOMES" ]; then
            IFS=',' read -ra OUTCOME_ARRAY <<< "$OUTCOMES"
            for outcome in "${OUTCOME_ARRAY[@]}"; do
              outcome=$(echo "$outcome" | xargs)
              ARGS+=(--outcome "$outcome")
            done
          fi

          echo "Running: trx-to-vsplaylist ${ARGS[@]}"
          trx-to-vsplaylist "${ARGS[@]}"

          if [ ! -f "$FINAL_OUTPUT" ]; then
            if [ "$SKIP_EMPTY" = "false" ]; then
              echo "Error: Playlist file was not created at: $FINAL_OUTPUT"
              exit 1
            else
              echo "Info: Playlist file was not created at: $FINAL_OUTPUT (likely due to --skip-empty and no matching tests)"
              continue
            fi
          fi

          echo "Successfully created playlist file: $FINAL_OUTPUT"
          PLAYLIST_PATHS+=("$FINAL_OUTPUT")
          ARTIFACT_BASENAMES+=("$(basename "$FINAL_OUTPUT" .playlist)")
        done

        # Output all playlist paths as a colon-separated list
        echo "playlist-paths=${PLAYLIST_PATHS[*]}" | tr ' ' ':' >> $GITHUB_OUTPUT
        echo "artifact-basenames=${ARTIFACT_BASENAMES[*]}" | tr ' ' ':' >> $GITHUB_OUTPUT
        echo "artifact-dir=$ARTIFACT_DIR" >> $GITHUB_OUTPUT

    - name: Upload Playlist Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name || 'playlists' }}
        path: ${{ steps.convert.outputs.artifact-dir }}/*.playlist
        if-no-files-found: 'error'
